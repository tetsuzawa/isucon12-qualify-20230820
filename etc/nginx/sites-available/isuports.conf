lua_package_path "/path/to/lua-resty-cookie/lib/?.lua;;";

server {
    # ===================================== trace_id =====================================
    set $trace_id '';
    access_by_lua_block {
        local cookie = require "resty.cookie"
        local uuid = require "resty.jit-uuid"

        local ck = cookie:new()
        local trace_id, err = ck:get("trace_id")

        if not (trace_id) or (trace_id == "") then
            trace_id = uuid.generate_v4()
            local ok, err = ck:set({
                key = "trace_id",
                value = trace_id,
                path = "/",
                httponly = true,
                secure = false, -- set to true if you want to enforce HTTPS
                max_age = 3600 -- cookie expiration in seconds, adjust as you see fit
            })

            if not ok then
                ngx.log(ngx.ERR, err)
                return
            end
        end

        ngx.var.trace_id = trace_id
    }
    # ===================================== trace_id =====================================


  listen 443 ssl http2;
  server_name *.t.isucon.dev;

  root /home/isucon/public/;

  ssl_certificate     /etc/nginx/tls/fullchain.pem;
  ssl_certificate_key /etc/nginx/tls/key.pem;
  ssl_dhparam         /etc/nginx/tls/dhparam.pem;
  ssl_protocols       TLSv1.2 TLSv1.3;
  ssl_ciphers ECDHE-ECDSA-AES128-GCM-SHA256:ECDHE-RSA-AES128-GCM-SHA256:ECDHE-ECDSA-AES256-GCM-SHA384:ECDHE-RSA-AES256-GCM-SHA384:ECDHE-ECDSA-CHACHA20-POLY1305:ECDHE-RSA-CHACHA20-POLY1305:DHE-RSA-AES128-GCM-SHA256:DHE-RSA-AES256-GCM-SHA384;

  location / {
    try_files $uri /index.html;
  }

  location ~ ^/(api|initialize) {
    proxy_set_header Host $host;
    proxy_read_timeout 600;
    proxy_pass http://127.0.0.1:3000;
  }

  location /auth/ {
    proxy_set_header Host $host;
    proxy_pass http://127.0.0.1:3001;
  }
}
